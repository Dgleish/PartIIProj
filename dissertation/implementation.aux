\relax 
\citation{docker}
\citation{pycharm}
\@writefile{toc}{\contentsline {chapter}{\numberline {1}Implementation}{1}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\newlabel{chap:implementation}{{1}{1}}
\@writefile{toc}{\contentsline {section}{\numberline {1.1}Implementation tools}{1}}
\@writefile{toc}{\contentsline {section}{\numberline {1.2}CRDT Ordered List Library}{1}}
\@writefile{lof}{\contentsline {figure}{\numberline {1.1}{\ignorespaces Class hierarchy for the supported CRDT operations. Shaded classes are concrete. Type $T$ must be representable as a string.\relax }}{2}}
\providecommand*\caption@xref[2]{\@setref\relax\@undefined{#1}}
\newlabel{fig:ops}{{1.1}{2}}
\citation{sortedlist}
\@writefile{lof}{\contentsline {figure}{\numberline {1.2}{\ignorespaces How \texttt  {ListCRDT} performs a \texttt  {OpAddRightLocal}\relax }}{3}}
\newlabel{fig:listcrdtaddright}{{1.2}{3}}
\@writefile{toc}{\contentsline {subsection}{\numberline {1.2.1}RGA}{3}}
\@writefile{toc}{\contentsline {subsection}{\numberline {1.2.2}LSEQ}{3}}
\citation{hlseq}
\citation{logootundo}
\@writefile{toc}{\contentsline {subsection}{\numberline {1.2.3}Undo/Redo}{4}}
\newlabel{sec:undo}{{1.2.3}{4}}
\@writefile{lof}{\contentsline {figure}{\numberline {1.3}{\ignorespaces How operations are undone and redone at replica with id $rid$\relax }}{4}}
\newlabel{fig:undostorage}{{1.3}{4}}
\@writefile{lof}{\contentsline {figure}{\numberline {1.4}{\ignorespaces How OpUndo and OpRedo fit into the operation hierarchy\relax }}{5}}
\newlabel{fig:undoops}{{1.4}{5}}
\citation{synchronised}
\@writefile{toc}{\contentsline {section}{\numberline {1.3}Application}{6}}
\newlabel{sec:helper}{{1.3}{6}}
\@writefile{lof}{\contentsline {figure}{\numberline {1.5}{\ignorespaces The layout of the application; arrows indicate the flow of operations. The numbers indicate the order in which \texttt  {CRDTApp} does these actions\relax }}{6}}
\newlabel{fig:app}{{1.5}{6}}
\@writefile{lof}{\contentsline {figure}{\numberline {1.6}{\ignorespaces An example sending of operations with $opID$s 1:A, 2:A and 2:B\relax }}{7}}
\newlabel{fig:deliveryorder}{{1.6}{7}}
\citation{tkinter}
\@writefile{toc}{\contentsline {subsection}{\numberline {1.3.1}GUI}{8}}
\citation{pickle}
\@writefile{toc}{\contentsline {section}{\numberline {1.4}Networking}{9}}
\newlabel{sec:networking}{{1.4}{9}}
\@writefile{toc}{\contentsline {subsection}{\numberline {1.4.1}Client-server Architecture}{10}}
\@writefile{lof}{\contentsline {figure}{\numberline {1.7}{\ignorespaces The standard client-server architecture with 5 clients\relax }}{11}}
\newlabel{fig:clsv}{{1.7}{11}}
\@writefile{toc}{\contentsline {subsection}{\numberline {1.4.2}P2P Architecture}{11}}
\@writefile{lof}{\contentsline {figure}{\numberline {1.8}{\ignorespaces The standard P2P architecture with 5 clients\relax }}{11}}
\newlabel{fig:p2p}{{1.8}{11}}
\@writefile{lof}{\contentsline {figure}{\numberline {1.9}{\ignorespaces The networking classes used in the application. \texttt  {NetworkClient} contains common code for sending and receiving data as described above.\relax }}{12}}
\newlabel{fig:nethier}{{1.9}{12}}
\citation{DH}
\citation{aesccm}
\@writefile{lof}{\contentsline {figure}{\numberline {1.10}{\ignorespaces The protocol for peers connecting in the P2P architecture. After exchanging peer identifiers, they synchronize their operations.\relax }}{13}}
\newlabel{fig:protocol}{{1.10}{13}}
\@writefile{toc}{\contentsline {section}{\numberline {1.5}Encryption}{13}}
\@writefile{toc}{\contentsline {section}{\numberline {1.6}Tor}{14}}
\@writefile{toc}{\contentsline {subsection}{\numberline {1.6.1}Basic Authentication}{14}}
